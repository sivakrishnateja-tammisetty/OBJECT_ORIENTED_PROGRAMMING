INTRO TO OOPS:
-------------

* CLASS - Blueprint for creating objects.
* OBJECT - instance, created as many times as you want.
* Attributes - characteristics associated  to a type (obj).
* Methods - FUnctions associated to a type.



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DEFINING A CLASS:
-----------------

*syntax:
        class class_name:
          statements & attributes
            .........
        call_the_class
        statements

*pass : pass is a placeholder (or) null operator.

Eg1:
class car:
    pass
car_1=car()
print(car_1)

o/p:
<__main__.car object at 0x7f0cddfbe8c0>




Eg2: Attributes
class car:
    color="Red"
car_1=car()
print(car_1.color)

o/p: Red


Eg3: Methods
class car:
    color="Red"
    type="TEJ"
car_1=car()
print(car_1.color.upper())
print(car_1.type.lower())
print(car_1.color.isalpha())

o/p:
RED
tej
True


Note: dot (.) --> is called dot notation. It is used to access any abilities that object might  have.




*self : self is the default parameter.



Eg3: METHOD


class counting:
    n=0
    def cnt(self):
        self.n=self.n+1
        print("Counted ",self.n)
c=counting()
c.cnt()    #counting.cnt(c)
c.cnt()    #counting.cnt(c)

o/p:
Counted 1
Counted 2

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CONSTRUCTORS AND DESTRUCTORS:
----------------------------

*constructors are used to setup the variables.
*constructors and estructors are optional.
*construtors called at begining and destructors are called at end.


Eg1:
class const_dest:
    def __init__(self):
        print("Constructor")
    def __del__(self):
        print("Destructor")
cd=const_dest()

o/p:
Constructor
Destructor



Eg2:
class const_dest:
    
    def __init__(self,color,type):
        self.color=color
        self.type=type
        print("Constructor")
    def __del__(self):
        print("Destructor")
cd=const_dest("RED","SUV")
print(cd.color)
print(cd.type)


o/p:
Constructor
RED
SUV
Destructor

Eg3:
class const_dest:
    
    def __init__(self,color,type):
        self.color=color
        self.type=type
        print("Constructor")
    def __del__(self):
        print("Destructor")
cd=const_dest("RED","SUV")
print(cd.color)
print(cd.type)
cd_1=const_dest("BLACK","BNW")
print(cd_1.color)
print(cd_1.type)

o/p:
Constructor
RED
SUV
Constructor
BLACK
BNW
Destructor
Destructor


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

FUNCTIONS VS OBJECT ORIENTED PROGRAMMING:
---------------------------------------


* USING FUNCTIONS:
 ----------------

def name(name):
    print("Hi ",name)
name("Siva")
name("Krishna")

o/p:
Hi siva
Hi Krishna



* USING OOPS:
 -------------
Eg2:
class name:
    name=""
    def __init__(self,x):
        self.name=x
        print("Hi ",x)
        print("Hi ",self.name)
name_1=name("Siva")
name_2=name("Krishna")

o/p:
Hi Siva
Hi Siva
Hi Krishna
Hi Krishna

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

INHERITANCE:
-----------


Eg1:
class name:
    name=""
    def __init__(self,n):
        self.name=n
        print("Hi ",self.name)
class foot(name):
    def fun(self):
        print("Hi ",self.name)
n=name("Siva")
f=foot("Krishna")
f.fun()

o/p:
Hi Siva
Hi Krishna
Hi Krishna




SINGLE-LEVEL INHERITANCE:
------------------------


Eg1:
class A:
    def state_1(self):
        print("statement 1 present")
    def state_2(self):
        print("statement 2 present")
    def state_3(self):
        print("statement 3 present")

class B(A):
    def state_4(self):
        print("statement 4 present")
a=A()
a.state_1()
a.state_2()
a.state_3()
b=B()
b.state_4()
b.state_3()

o/p:
statement 1 present
statement 2 present
statement 3 present
statement 4 present
statement 3 present



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


MULTI-LEVEL INHERITANCE:
-----------------------


Eg1:
class A:
    def state_1(self):
        print("statement 1 present")
    def state_2(self):
        print("statement 2 present")
    def state_3(self):
        print("statement 3 present")

class B(A):
    def state_4(self):
        print("statement 4 present")
class C(B):
    def state_5(self):
        print("Statement 5 present")

a=A()
a.state_1()
a.state_2()
a.state_3()
b=B()
b.state_4()
b.state_3()
c=C()
c.state_1()
c.state_2()
c.state_3()
c.state_4()
c.state_5()

o/p:
statement 1 present
statement 2 present
statement 3 present
statement 4 present
statement 3 present
statement 1 present
statement 2 present
statement 3 present
statement 4 present
Statement 5 present


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MULTIPLE INHERITANCE:
--------------------

Eg:
class A:
    def state_1(self):
        print("statement 1 present")
    def state_2(self):
        print("statement 2 present")
    def state_3(self):
        print("statement 3 present")

class B:
    def state_4(self):
        print("statement 4 present")
class C(A,B):
    def state_5(self):
        print("Statement 5 present")




c=C()
c.state_1()
c.state_2()
c.state_3()
c.state_4()
c.state_5()

o/p:
statement 1 present
statement 2 present
statement 3 present
statement 4 present
Statement 5 present



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

OPERATOR OVERLOADING:
--------------------

Eg1:
a=1
b=2
print(a+b)
print(int.__add__(a,b))

o/p:
3
3



Eg2:
class vegtables:
    def __init__(self,carrots,beans):
        self.carrots=carrots
        self.beans=beans
    

v1=vegtables(2,3)
v2=vegtables(3,4)
v3=v1+v2
print(v3)

o/p:
Traceback (most recent call last):
  File "/home/damner/code/script.py", line 10, in <module>
    v3=v1+v2
TypeError: unsupported operand type(s) for +: 'vegtables' and 'vegtables'




Eg3:optr overloading
class vegtables:
    def __init__(self,carrots,beans):
        self.carrots=carrots
        self.beans=beans
    def __add__(self,other):
        carrots=self.carrots+other.carrots
        beans=self.beans+other.beans
        return  vegtables(carrots,beans)

v1=vegtables(2,3)
v2=vegtables(3,4)
v3=v1+v2
print("Carrots: ",v3.carrots)
print("Beans: ",v3.beans)

o/p:
Carrots: 5
Beans: 7


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DATA HIDING:
-----------

